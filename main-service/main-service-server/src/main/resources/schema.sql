CREATE TABLE IF NOT EXISTS users ( user_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL, name VARCHAR(250), email VARCHAR (254), CONSTRAINT pk_users PRIMARY KEY(user_id), CONSTRAINT uq_users_name UNIQUE(name) );

CREATE TABLE IF NOT EXISTS categories ( category_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL, name VARCHAR(50), CONSTRAINT pk_categories PRIMARY KEY(category_id), CONSTRAINT uq_category_name UNIQUE(name) );

CREATE TABLE IF NOT EXISTS locations ( location_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL, lat DOUBLE PRECISION, lon DOUBLE PRECISION, CONSTRAINT pk_locations PRIMARY KEY(location_id) );

CREATE TABLE IF NOT EXISTS events ( event_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL, title VARCHAR(120), description VARCHAR(7000), annotation VARCHAR(2000), event_date TIMESTAMP WITHOUT TIME ZONE, created_on TIMESTAMP WITHOUT TIME ZONE, published_on TIMESTAMP WITHOUT TIME ZONE, paid BOOLEAN, request_moderation BOOLEAN, event_status VARCHAR(100), participation_limit INTEGER, location_id BIGINT NOT NULL, category_id BIGINT, user_id BIGINT, CONSTRAINT pk_events PRIMARY KEY(event_id), CONSTRAINT fk_event_to_location FOREIGN KEY(location_id) REFERENCES locations (location_id), CONSTRAINT fk_events_to_categories FOREIGN KEY(category_id) REFERENCES categories (category_id), CONSTRAINT fk_events_to_users FOREIGN KEY(user_id) REFERENCES users(user_id) );

CREATE TABLE IF NOT EXISTS requests ( request_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL, created TIMESTAMP WITHOUT TIME ZONE, request_status VARCHAR(50), event_id BIGINT, user_id BIGINT, CONSTRAINT pk_requests PRIMARY KEY(request_id), CONSTRAINT fk_request_to_event FOREIGN KEY(event_id) REFERENCES events(event_id), CONSTRAINT fk_request_to_user FOREIGN KEY (user_id) REFERENCES users(user_id) );

CREATE TABLE IF NOT EXISTS compilations ( compilation_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL, title VARCHAR(50), pinned BOOLEAN, CONSTRAINT pk_compilations PRIMARY KEY(compilation_id) );

CREATE TABLE IF NOT EXISTS compilations_events ( compilations_events_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL, event_id BIGINT, compilation_id BIGINT, CONSTRAINT pk_compilations_events PRIMARY KEY(compilations_events_id), CONSTRAINT fk_compilations_events_to_events FOREIGN KEY(event_id) REFERENCES events(event_id), CONSTRAINT fk_compilations_events_to_compilations FOREIGN KEY(compilation_id) REFERENCES compilations(compilation_id) );

CREATE TABLE IF NOT EXISTS places ( place_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL, name VARCHAR(500), lat DOUBLE PRECISION, lon DOUBLE PRECISION, radius DOUBLE PRECISION, CONSTRAINT pk_places PRIMARY KEY(place_id) );

CREATE OR REPLACE FUNCTION distance ( lat1 float, lon1 float, lat2 float, lon2 float )
    RETURNS float
AS
'
declare
    dist float = 0;
    rad_lat1 float;
    rad_lat2 float;
    theta float;
    rad_theta float;
BEGIN
    IF lat1 = lat2 AND lon1 = lon2
    THEN
        RETURN dist;
    ELSE
        rad_lat1 = pi() * lat1 / 180;
        rad_lat2 = pi() * lat2 / 180;
        theta = lon1 - lon2;
        rad_theta = pi() * theta / 180;
        dist = sin(rad_lat1) * sin(rad_lat2) + cos(rad_lat1) * cos(rad_lat2) * cos(rad_theta);
        IF dist > 1
            THEN dist = 1;
        END IF;
        dist = acos(dist);
        dist = dist * 180 / pi();
        dist = dist * 60 * 1.8524;
        RETURN dist;
    END IF;
END;
'
LANGUAGE PLPGSQL;